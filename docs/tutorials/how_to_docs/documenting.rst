.. _documenting_everest:

###################
Documenting EVerest
###################

If you want to start documenting quickly without the need of reading through
all the theory about current documentation structure and best practices, have
a look at our :ref:`How to write EVerest documentation <howto_document>`.

.. note::

  For doing quick changes in existing documentation pages, the "How to" might
  be a good choice. You also can use the "How to" for creating completely new
  pages. But doing this, prepare for getting more change requests while
  community members are reviewing your pull requests then. To avoid this, read
  through this page in front of you to get more theory.

**********************************
Current structure of documentation
**********************************

.. note::

  Our documentation is currently undergoing some changes - mostly regarding
  the structure of where pages are stored and the categorization of content.
  This section here describes the former structure (which is mostly still
  present). Next section will shed a light on how things will look like in
  future.

EVerest documentation uses Sphinx as documentation generator. As input format,
reStructuredText is used. See here for more information about Sphinx:
https://www.sphinx-doc.org/en/master/

.. note::

  It is not required to get a deep understanding of Sphinx to create
  documentation for EVerest. You can check existing pages of the EVerest
  documentation and you will see how easy it is to start documenting.

The EVerest documentation consists of three parts - see the subsections for
further details:

#. The main EVerest documentation

#. Automatically generated documentation

#. Technical documentation near code

Main EVerest documentation
==========================

If you are reading this, you are in the middle of the
`main EVerest documentation <https://everest.github.io/nightly/index.html>`_.
This is a coherent documentation that helps you with getting a fast overview
of the EVerest framework and the EVerest tools and also contains some
tutorials.
  
The source of this part of documentation is located in the
`doc directory of the EVerest/EVerest repository <https://github.com/EVerest/EVerest>`_
on GitHub.

The contents are in the format of reStructuredText/Sphinx.

Reference documentation
=======================

Generated reference docs
------------------------

EVerest interfaces, modules and types contain documentation right inside of
json/yaml files.
Those are located in the interfaces, modules, types directories - the same
directory which also contains the source code - see the
`EVerest/everest-core repository <https://github.com/EVerest/everest-core>`_
to find them.

This part is generated by GitHub actions when running the
``deploy-sphinx-doc.yml`` workflow (see ``EVerest/EVerest/.github/``).
  
The generated pages can be found in
:ref:`the reference section of the main documentation <everest_reference>`.

Optionally, each module can contain additional handwritten documentation.
See next subsection for more information on this.

Additional handwritten content
------------------------------

A module source directory can contain additional handwritten documentation.

If you create a ``docs`` directory right inside of a modules source code
directory, you can put markdown files with additional documentation in it.
The contents will be hyperlinked on the page with the generated reference
docs.

.. note::

  If you only have a small piece of additional documentation that you want to
  add to the generated docs, you can also create a ``doc.rst`` file directly
  in the directory of the module. This has the same effect.

As an example, see the generated
`EvseManager reference page <https://everest.github.io/nightly/_generated/modules/EvseManager.html>`_
. In the second paragraph, you see a link to the detailed handwritten
documentation.

Technical documentation near code
=================================

The documentation parts explained up to now are all part of the main EVerest
documentation. Some documentation snippets can also be found directly in the
GitHub repositories stored near the corresponding source code.

Those docs snippest are not being pushed to the EVerest main documentation.

Two examples:

* https://github.com/EVerest/everest-admin-panel
* https://github.com/EVerest/everest-dev-environment/tree/main/dependency_manager

.. important::

  We are currently changing the structure of documentation. The new concept
  will also include to get these documentation snippets to be integrated into
  the main documentation. Currently, it is not recommended to document features
  of EVerest directly in the repository without referencing to it from the main
  docs.

*****************************
Planned restructuring of docs
*****************************

We will start to migrate the documentation to a new page structure end of 2024.

If you want to create new pages, you should follow the hints of the up-to-date
:ref:`documentation how-to <howto_document>`.

More information about the new structure will follow soon.

********************************
Process of EVerest documentation
********************************

Preparing a new documentation page
==================================

Let's suppose, you are aware of a brand-new EVerest feature that is still not
documented. Or you found some aspect of EVerest that still lacks a
corresponding documentation page.

This is what to do:

1. Check the existing documentation for similar sections.
  a. Search https://everest.github.io/nightly/index.html
  b. Is it a module that you want to add documentation to? Then have a look
    at the ``everest-core`` repository in the ``modules`` directory and check
    if any documentation pages already do exist there.
  c. Use GitHub search with ``org:EVerest`` and your keywords to check if you
    can find existing documentation snippets near the source code of the
    feature. 

  If you can find something that is related to the topic on your mind, please
  decide, whether a new documentation section should be added or the existing
  page should be updated.

2. Create a GitHub issue
  a. In the repository https://github.com/EVerest/EVerest, click on ``Issues``
    and then ``New issue``.
  b. Choose ``Open a blank issue`` (or another type if you think that is more
    suitable) and fill out the page with information about
    the required documentation.
  c. Also add a reference to any related documentation pages and describe how
    the new documentation parts shall relate to that (new section, change of
    docs, new page with reference to existing ones etc.).

3. Optionally: Inform others about the issue

  Especially if you do not want to create documentation on your own (due to
  lack of time or knowledge), you can inform others about this new
  documentation requirement (the issue). This is optional as the maintainers
  of the EVerest documentation will get informed about the newly created issue.
  But by taking the topic into an appropriate working group or into the EVerest
  Zulip channels, you could find the right people who have time and knowledge
  to create such a new section in the documentation.

Creating a new documentation page
=================================

Creating a Git branch
-----------------

As with source code feature development, documentation is also organized with
Git branches. The scheme to name a branch should be adhered to

.. code-block:: bash

  doc/yourInitials-name-of-topic

In case your name is Abraham Braveman and you are creating a documentation
about Plug'n'Charge, you could name your branch

.. code-block:: bash

  doc/ab-plug-n-charge

Choosing a place to store the docs
----------------------------------

If you want to create a new documentation page, you should first check if
pages with similar topics are already existing. It is a good idea to place
your new page in the same location.

In general, you can decide where to put your documentation pages:

* The repository for the main documentation:
  https://github.com/EVerest/EVerest in directory ``docs``
* Directly inside of a ``docs.rst`` file or the ``docs`` directory in your
  modules directory structure. This will generate documentation pages in the
  ``references`` section of the main documentation.
* Near other source code.

.. note::

  Don't be afraid to put your documentation at a "wrong" location. It is more
  important that it is existing. The maintainers of the EVerest documentation
  will be able to move your docs to a better suitable place later.

Creating your pages
-------------------

Best practice is to look at existing documentation pages to get an idea about
how headlines or bullet points are to be handled.

You can create a ``Draft pull request`` on GitHub at an early stage of your
work to let others already get an idea how the new documentation part will look
like and give them the opportunity to comment on your work already.

.. note::

  Consider to reference eventually existing docs with the same topic from your
  new page and vice versa.

Creating a PR and merge
-----------------------

If you are ready, you can create a pull request for your branch. The
maintainers of the corresponding repository will get informed and will try to
block time to review your work.

**************************
Building the documentation
**************************

The documentation is built by the ``deploy-sphinx-doc.yml`` workflow located in
``EVerest/EVerest``. It is triggered by a push to the ``main`` branch of
``EVerest/EVerest``. The workflow generates the documentation and pushes it to
GitHub Pages.

After that, the documentation is available at `<http://everest.github.io>`_.

Documentation about building the documentation locally will follow.
